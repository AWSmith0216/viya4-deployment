---
# Update Resources in Kustomization.yaml
- name: apply service account role
  lineinfile:
    path: "{{ DEPLOY_DIR }}/kustomization.yaml"
    insertafter: "resources:" 
    line: "  - site-config/cas-{{ item | trim }}-default"
    firstmatch: yes
    state: present
  with_items: "{{ SAS_TENANT_IDS.split(',') }}"
  tags:
    - onboard

# Delete the site.yaml file
- name: delete site.yaml
  file:
    state: absent
    path: "{{ DEPLOY_DIR }}/site.yaml"
  tags:
    - onboard

# Generate new site.yaml
- name: kustomize - generate new manifest
  ansible.builtin.shell: |
    kustomize build {{ DEPLOY_DIR }} -o {{ DEPLOY_DIR }}/site.yaml
  tags:
    - onboard

# Re-deploy after enabling cas servers
- name: prereqs - cluster-api
  ansible.builtin.shell: |
    kubectl --kubeconfig {{ KUBECONFIG }} apply -n {{ NAMESPACE }} --selector="sas.com/admin=cluster-api" -f {{ DEPLOY_DIR }}/site.yaml
    kubectl --kubeconfig {{ KUBECONFIG }} wait --for condition=established --timeout=60s -l "sas.com/admin=cluster-api" crd
  register: result
  failed_when:
    - result["stderr"]|length > 0
    - '"no matches for kind" not in result.stderr'
    - '"in version" not in result.stderr'
    - '"Warning" not in result.stderr'
    - '"no matching resources found" not in result.stderr'
    - '"error: no objects passed to apply" not in result.stderr'
  tags:
    - onboard

- name: prereqs - cluster-wide
  ansible.builtin.shell: |
    kubectl --kubeconfig {{ KUBECONFIG }} apply -n {{ NAMESPACE }} --selector="sas.com/admin=cluster-wide" -f {{ DEPLOY_DIR }}/site.yaml
    kubectl --kubeconfig {{ KUBECONFIG }} wait --for condition=established --timeout=60s -l "sas.com/admin=cluster-wide" crd
  register: result
  failed_when:
    - result["stderr"]|length > 0
    - '"no matches for kind" not in result.stderr'
    - '"in version" not in result.stderr'
    - '"Warning" not in result.stderr'
    - '"no matching resources found" not in result.stderr'
    - '"error: no objects passed to apply" not in result.stderr'
  tags:
    - onboard

- name: prereqs - cluster-local deploy
  ansible.builtin.command: |
    kubectl --kubeconfig {{ KUBECONFIG }} apply -n {{ NAMESPACE }} --selector="sas.com/admin=cluster-local" -f {{ DEPLOY_DIR }}/site.yaml --prune
  register: result
  failed_when:
    - result["stderr"]|length > 0
    - '"no matches for kind" not in result.stderr'
    - '"in version" not in result.stderr'
    - '"Warning" not in result.stderr'
  tags:
    - onboard

- name: manifest - deploy
  ansible.builtin.command: |
    kubectl --kubeconfig {{ KUBECONFIG }} apply -n {{ NAMESPACE }} --selector="sas.com/admin=namespace" -f {{ DEPLOY_DIR }}/site.yaml --prune
  register: result
  failed_when:
    - result["stderr"]|length > 0
    - '"no matches for kind" not in result.stderr'
    - '"in version" not in result.stderr'
    - '"Warning" not in result.stderr'
  tags:
    - onboard

# Offboard CAS servers
- name: kubectl get cas servers for tenants
  ansible.builtin.shell: |
    kubectl --kubeconfig {{ KUBECONFIG }} -n {{ NAMESPACE }} get casdeployments
  register: result
  failed_when:
    - result["stderr"]|length > 0
  tags:
    - offboard

- name: kubectl delete cas servers for tenants
  ansible.builtin.shell: |
    echo {{ item }}
    kubectl --kubeconfig {{ KUBECONFIG }} -n {{ NAMESPACE }} delete casdeployment -l sas.com/tenant={{ item | trim }}
  when: 'item|trim in result.stdout'
  with_items: '{{ SAS_TENANT_IDS.split(",") | replace(" ", "") }}'
  tags:
    - offboard
